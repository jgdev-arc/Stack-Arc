name: Build and deploy JAR to Azure Web App - stackarc-api-cjhwakfebnd6bqab

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Locate project directory and build tool
        id: locate
        shell: bash
        run: |
          set -e
          echo "Repo root: $(pwd)"
          echo "Listing files at root:"
          ls -la
          echo "Searching for build files…"

          # Prefer root if present
          if [[ -f "pom.xml" ]]; then
            echo "PROJECT_DIR=." >> $GITHUB_ENV
            echo "BUILD_TOOL=maven" >> $GITHUB_ENV
            echo "Found pom.xml at repo root"
            exit 0
          fi
          if [[ -f "build.gradle" || -f "build.gradle.kts" ]]; then
            echo "PROJECT_DIR=." >> $GITHUB_ENV
            echo "BUILD_TOOL=gradle" >> $GITHUB_ENV
            echo "Found Gradle build at repo root"
            exit 0
          fi

          # Otherwise, find first matching build file anywhere in repo
          CANDIDATE_DIR="$(git ls-files | grep -E '(pom\.xml|build\.gradle(\.kts)?)$' | head -n1 | xargs -r dirname)"
          if [[ -z "$CANDIDATE_DIR" ]]; then
            echo "❌ Neither pom.xml nor build.gradle(.kts) found anywhere in the repo."
            exit 1
          fi

          echo "PROJECT_DIR=$CANDIDATE_DIR" >> $GITHUB_ENV
          if [[ -f "$CANDIDATE_DIR/pom.xml" ]]; then
            echo "BUILD_TOOL=maven" >> $GITHUB_ENV
            echo "Detected Maven project at: $CANDIDATE_DIR"
          else
            echo "BUILD_TOOL=gradle" >> $GITHUB_ENV
            echo "Detected Gradle project at: $CANDIDATE_DIR"
          fi

      # --- Maven path ---
      - name: Build with Maven
        if: env.BUILD_TOOL == 'maven'
        run: mvn -B -DskipTests clean package
        working-directory: ${{ env.PROJECT_DIR }}

      # --- Gradle path ---
      - name: Prepare Gradle (cache)
        if: env.BUILD_TOOL == 'gradle'
        uses: gradle/actions/setup-gradle@v3

      - name: Make Gradle wrapper executable
        if: env.BUILD_TOOL == 'gradle'
        run: |
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
          else
            echo "❌ Gradle wrapper (./gradlew) not found in $PWD. Please commit it (run 'gradle wrapper' locally)."
            exit 1
          fi
        working-directory: ${{ env.PROJECT_DIR }}

      - name: Build with Gradle
        if: env.BUILD_TOOL == 'gradle'
        run: ./gradlew build -x test
        working-directory: ${{ env.PROJECT_DIR }}

      - name: Locate built JAR
        id: jar
        shell: bash
        run: |
          set -e
          echo "PROJECT_DIR=${PROJECT_DIR}"
          echo "Listing target/build dirs for debugging:"
          ls -la "${PROJECT_DIR}/target" 2>/dev/null || true
          ls -la "${PROJECT_DIR}/build/libs" 2>/dev/null || true

          if compgen -G "${PROJECT_DIR}/target/*.jar" > /dev/null; then
            JAR_PATH=$(ls -1 "${PROJECT_DIR}/target/"*.jar | head -n1)
          elif compgen -G "${PROJECT_DIR}/build/libs/*.jar" > /dev/null; then
            JAR_PATH=$(ls -1 "${PROJECT_DIR}/build/libs/"*.jar | head -n1)
          else
            echo "❌ Could not find JAR in ${PROJECT_DIR}/target or ${PROJECT_DIR}/build/libs."
            exit 1
          fi

          echo "Found JAR: $JAR_PATH"
          echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV

      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: ${{ env.JAR_PATH }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build
        uses: actions/download-artifact@v4
        with:
          name: java-app

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_0E145546C783447C805B0C0CF0E97D43 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_67D4F51B269448558F3A397E308B86D1 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_06251A6175C64CBAB43EC3517F304AD0 }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'stackarc-api'
          resource-group-name: 'stackapp'
          slot-name: 'Production'
          package: '*.jar'

